name: denovonear

on: 
  push:
  schedule:
    - cron: "34 3 3 * *"

jobs:
  build_wheels:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        # python: ["cp38", "cp39", "cp310", "cp311"]
        os: ['windows-latest']
        python: ["cp310"]

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.9.0
        env:
          CIBW_BUILD: ${{ matrix.python }}-*
          CIBW_SKIP: "*-win32 *-manylinux_i686 *-musllinux*"
          CIBW_TEST_COMMAND: "python -m unittest discover -s {project}"

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 coverage coveralls
    
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run tests
        run: |
          pip install -e .
          python -m unittest discover
          denovonear cluster --in data/example_de_novos.txt --out output.txt
          denovonear cluster \
            --in data/example.grch38.dnms.txt  \
            --gencode data/example.grch38.gtf \
            --fasta data/example.grch38.fa \
            --out output.txt
          denovonear transcripts --de-novos data/example_de_novos.txt --out output.txt --all-transcripts
          denovonear rates --genes data/example_gene_ids.txt --out output.txt

      - name: Build sdist
        run:
          python setup.py sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

      - name: Coveralls
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        run: |
          python -m coverage run --source=./denovonear -m unittest discover
          coveralls --service=github

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    # if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.pypi_token }}
          # To test: repository_url: https://test.pypi.org/legacy/
